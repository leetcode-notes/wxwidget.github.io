<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: Recommender&nbspSysterm | Yang Cheng]]></title>
  <link href="http://wxwidget.github.io/blog/categories/recommender-nbspsysterm/atom.xml" rel="self"/>
  <link href="http://wxwidget.github.io/"/>
  <updated>2014-08-18T20:20:07+08:00</updated>
  <id>http://wxwidget.github.io/</id>
  <author>
    <name><![CDATA[杨程]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[机器学习在个性化推荐中的应用]]></title>
    <link href="http://wxwidget.github.io/blog/2013/12/04/learning-to-recommendation/"/>
    <updated>2013-12-04T11:38:00+08:00</updated>
    <id>http://wxwidget.github.io/blog/2013/12/04/learning-to-recommendation</id>
    <content type="html"><![CDATA[<h2 id="section">引子</h2>

<ul>
  <li>受众: 技术杂志的读者，受过计算机教育但是领域比较泛。要求有简单的数学基础和机器学习的背景知识。</li>
  <li>主题：不讲机器学习算法是什么,讲学习算法如何和应用场景结合的问题</li>
  <li>逻辑: 发现问题-分析问题-解决问题</li>
</ul>

<!--more-->

<h2 id="section-1">正篇</h2>

<p>双11对消费者来说是一场空前的购物狂欢，对技术人员来说更像一场盛大的技术嘉年华。</p>

<p>2013年以前，天猫的推荐一直采用传统的协同过滤的启发式公式方法，特别是item based 方法，item based 算法在描述商品与商品相似度方面是非常优秀的，但是当我们遇到如下两个问题时，便捉襟见肘了：1) 当商品之间的关系可以由多个维度来描述，比如用户行为和文本相似性，如何来融合这些维度算法的权重？2) 当需要基于用户的实时数据（通常有数十个维度），预测用户的偏好，如何确定这些特征的权重？</p>

<p>今年，我们大量的采用了机器学习算法提升用户体验，有效的改善了当前的业务现状, 同时利用大数据的优势，产生了新的生产力。</p>

<p>在典型的业务场景中，机器学习主要用于购物链路的导购：</p>

<ul>
  <li>交易前类目品牌购买预测</li>
  <li>交易中相似和搭配购买推荐</li>
  <li>交易后回路引流</li>
</ul>

<p>在双11场景中,机器学习在预热期、活动中、活动结束后3个时间段发挥不同的作用。</p>

<ul>
  <li>在预热期主要用于引导用户关注品牌定制双11;引导将商品加入购物车和收藏夹加快购物效率;同时搜集用户购买意向，预测用户在类目和品牌的购买倾向。</li>
  <li>在活动中对用户进行个性化引导，一方面利用历史数据，算法学习出用户的偏好和意图，使得一进入天猫页面给与最直接的个性化冲击。比如在首页的个性化品牌，我的双11页面的品牌活动，无线会场的个性化等等。 另一方面，发挥集体智慧优势挖掘商品、品牌或者类目之间的关联关系，帮助用户寻找更合适的相似替换商品、提供更加合理的购买搭配。比如：在下架页的相似推荐，加入购物车后的搭配推荐。</li>
  <li>活动结束后，调整算法模型，平衡日常模型和活动模型的效果。即要剔除异常数据使得日常推荐体验不下降, 又要起到清尾货保证活动部分延续性的作用。</li>
</ul>

<p>可以看到机器学习应用的业务场景繁多, 业务目标不一样，算法的设计也会千差万别, 
因此，下面的内容不会涉及到全部的应用场景，而是通过两个基本的机器学习案例来讨论天猫是如何根据业务场景来设计机器学习算法的。
以下的文章结构安排如下：先讨论用户的偏好预测和在线点击率预估两个案例，然后综合两个案例介绍天猫如何应对大规模的机器学习的挑战。</p>

<h2 id="section-2">机器学习是如何工作的</h2>

<p>如何在复杂的场景中抓住算法设计的核心，是机器学习应用的主要挑战。 在应用层面上，业务目标决定算法形态。
比如当业务强调浏览深度的时候，算法上目标上就需要偏向与高质量的集合形式候选的推荐, 定义多维度的质量或者抽取提炼体现质量维度的特征等；
如果业务强调召回降低基尼系数，算法上要控制流量，在准确率和召回率之间找到业务平衡点，融入尾部优势的特征,调整正负样本比率和样本的权重等。</p>

<p>尽管业务变幻莫测, 我们还是能抽丝剥茧, 找到机器学习算法上的是抽象一致的本质。
天猫推荐在机器学习实践中使用的主要技术是：</p>

<ul>
  <li>分类/回归模型</li>
  <li>自动化参数</li>
  <li>多模型融合</li>
  <li>海量数据和分布式</li>
</ul>

<p>以例为证：</p>

<h3 id="section-3">用户的偏好预测</h3>

<p>电商领域的偏好一般是指用户长期积累起来的购物行为惯性。所以在预测偏好时，通常会选用大粒度,更抽象的维度去预测，
我们会在离线预测用户品牌和类目的购买偏好。类目偏好和品牌偏好类似，所以这里只以品牌偏好为例子。</p>

<ul>
  <li><strong>问题1</strong>：给定用户U和品牌列表L，从中选择N个品牌作为列表候选。 </li>
  <li><strong>问题2</strong>：给定用户U和品牌列表L，预测当天用户U对品牌B的产生行为的可能性。通常行为指的是点击、购买、收藏等</li>
</ul>

<p>如果假设用户对品牌的感知是独立的，那么<strong>问题1</strong>可以简化成TOPN的问题，<strong>问题2</strong>的TOPN解可以作为<strong>问题1</strong>的答案。
我们通过构造分类模型来预测用户对品牌的偏好程度，求解问题。</p>

<ul>
  <li>
    <p>数据。数据的真实性和充分性决定了算法的效果, 如何挑选数据是机器学习算法最重要的第一步。
在Netflix影视推荐中，可以用用户电影评分做预测。 在天猫业务中这种常用的显式表达的数据是缺失的,
我们只能利用隐式的用户行为推测偏好。一种方法是以用户对品牌产生行为的类型、次数和时间衰变映射到得分，然后再转化成评分预测问题。
另一种是直接预估行为(如:点击)的可能性，直接预测法在此场景中效果更好。</p>
  </li>
  <li>
    <p>模型。模型是算法的计算核心。对某个样例，如果X表示&lt;用户，品牌&gt;对，Y表示用户是否点击品牌。我们的基础模型是通过逻辑回归预测
用户对品牌的点击可能性，<a href="http://en.wikipedia.org/wiki/Logistic_regression">逻辑回归</a>的基本假设是：</p>
  </li>
</ul>

<script type="math/tex; mode=display"> 
p = P(Y=1 | X=x)= \frac{1}{1+e^{-(w_0 + w x)}}
</script>

<p>其中w是的模型的参数，它的解是：</p>

<script type="math/tex; mode=display">
w = \arg {\max _w}P(Y|X;w) = \arg {\max _w}\prod\limits_{i = 1}^N {P({y_i}|{x_i};w)} 
</script>

<p>实际过程中我们转化成标准型，加入L1，L2正则化之后求解。
考虑到逻辑回归归根结底是广义的线性模型，而实际的数据分布是非常复杂的非线性关系。我们采用了一些非线性的方法，
比如对特征非线性离散化，条件组合, 有限核变换等等，这些方法需要对数据有正确的认识才能取得好的效果。
同时也会采用非线性模型的方法，在阿里集团中混合逻辑回归是最常见的方法，该方法是Mixture of expert的一种简单变种，
这方面的资料非常丰富，这里就不再展开。</p>

<ul>
  <li>特征。在特征层面，按用途上分成两种，一种是warm-start特征，解决数据充分时候准确的问题。主要是品牌id，用户id。
另一种cold-start特征，解决用户数据缺失、品牌数据缺失的问题。这些特征通常是集合性特征，比如品牌的主题内容，类目, 用户等级等等。
从从属上看，特征分析全局特征，用户特征，品牌特征，用户品牌关联特征, 其中用户品牌关联特征起关键的作用。有一些特征是专门设计过的，比如正对用户等级比较高，购买能力比较强的用户会和品牌的档次结合组合成特征；对冲着折扣找便宜的用户，折扣力度和热门程度一起也会形成组合特征;考虑业务本身的特征，我们不希望热门的品牌局部过热导致基尼系数过高和客服服务质量的下降, 此时我们会更突出个性化, 引入用户权重和品牌权重。</li>
</ul>

<p>当然,没有万能的模型，不论是朴素逻辑回归模型还是混合逻辑归回模型，都会有它的缺点。
逻辑回归对高维非线性数据不理想，混合逻辑回归区域划分参数过度敏感容易过拟合。
在个性化实践中也Learning To Rank也应用比较广泛。在品牌偏好计算中，通常不关心具体的数值大小，
更加关心的是相对的偏好关系。Pairwise的学习方式，把浏览，点击，收藏，加入购车，购买等用户行为用偏序关系连接在一起，个性化程度也更强;
同时，为了是算法即拟合双11的突变性又延续日常的模型, 我们以日常模型为先验, 训练双11的模型，采用了双模型加权的方法。</p>

<p>品牌偏好对应的业务场景非常多, 但是大致分成情感化连接和新颖性发现两个部分。用户品牌偏好只解决了情感化连接的部分，我们同样也会通过挖掘品牌和品牌之间的联系, 让用户发现新品牌，算法会预测用户对新品牌的偏好程度，提高惊喜度。</p>

<h3 id="section-4">在线点击率预估</h3>

<p>通常用户对推荐结果的点击行为是衡量推荐结果质量的重要指标之一, 在推荐中会直接预估用户的对推荐候选的点击率。
我们根据应用场景，把点击率预估可以分成两个部分。</p>

<ul>
  <li>离线点击率预估。离线部分是数据层面上的复用, 可用于快速业务接入和系统低延时的响应。</li>
  <li>在线点击率预估。在线部分是模型层面上的复用, 用于更精准的用户个性化。</li>
</ul>

<p>核心算法和<strong>用户偏好预测</strong>基本上一致，不同的是在线点击率预估结合实时和历史的数据，
机器学习已经不是纯算法问题，已经演变成算法系统。本节将忽略算法的细节，重点是讲述商品在线点击率预估的算法架构。</p>

<p><img src="/images/recommender.png" alt="推荐系统结构图" /></p>

<p>(这张图重新画下，注意只要一个框架图，不能太过具体)</p>

<p>系统流程是：</p>

<ol>
  <li>用户通过业务层发送请求</li>
  <li>推荐服务请求用户引擎获取用户特征。包括一下几件事：
    <ul>
      <li>计算实时意图, 计算用户实时类目、品牌、标签等偏好等等</li>
      <li>页面场景分析，来源页和当前页的上下文情景等等</li>
      <li>获取用户历史偏好：包括人物画像，历史行为记录，内容标签等等</li>
      <li>预测用户心智和状态</li>
    </ul>
  </li>
  <li>推荐引擎合成检索请求并获取推荐候选列表, 此时候选列表通过离线计算粗排基本有序</li>
  <li>获取候选用户特征和商品特征，按需做组合和变换等操作, 生成最终模型特征</li>
  <li>计算引擎根据模型预估点击率，对结果排序。模型分两个部分：
    <ul>
      <li>离线学习的模型, 按天更新模型,适用相对稳定的场景。 </li>
      <li>在线学习在研发阶段, 实时更新,适用变化比较快的场景。</li>
    </ul>
  </li>
  <li>推荐引擎对结果再加工，投送到目标资源位。主要的加工包括：
    <ul>
      <li>低质量候选过滤。</li>
      <li>多样性控制</li>
      <li>时效性混新</li>
      <li>探索和开发</li>
      <li>业务逻辑混入等等</li>
    </ul>
  </li>
</ol>

<p>可以看到机器学习算法作为一个算法系统在整个推荐系统发挥重要的作用。
从理解用户意图、预测用户的行为、实体关联网络挖掘到
综合所有因子给用户推荐最合适的候选的排序,
再到不同质候选混合，多逻辑混排, 跨终端推荐,…, 
机器学习深入各各环节。</p>

<h2 id="section-5">总结</h2>

<p>通过以上两个案例，大致了解和算法计算框架和系统骨架, 但是绝对不是机器学习应用的全部。
在个性化推荐实践中面临巨大的挑战, 还需要不断的实践和探索. 比如：</p>

<ul>
  <li>目标上：提供多准则推荐算法, 支持多维度的评价指标; 实质性提升用户体验，提供更加有弹性和甚至不打扰的结果。</li>
  <li>特征上：结合上下文信息, 深化对用户和候选的理解;利用更多的外围数据，建立实体知识体系;面对动态数据，捕捉用户意图漂移和商品的生命演化。</li>
  <li>模型上：尝试新的非线性算法模型，从不同的维度训练算法模型，利用各模型的优点组合新算法。</li>
  <li>规模上：面对的是不断增长的海量数据，亿级的特征，开发快速高效的大规模和伸缩性并发算法。</li>
  <li>工程上: 推荐系统是一个非常复杂的系统，机器学习算法需要结合复杂系统, 融入到系统中提供高效稳定的结果。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CTR Prediction 3.0]]></title>
    <link href="http://wxwidget.github.io/blog/2013/11/22/ctr-prediction-v3/"/>
    <updated>2013-11-22T10:47:00+08:00</updated>
    <id>http://wxwidget.github.io/blog/2013/11/22/ctr-prediction-v3</id>
    <content type="html"><![CDATA[<h2 id="section">现状</h2>

<ul>
  <li>1.0的版本解决了离线算法融合的问题，所用的特征全部是离线计算的特征，和用户没有任何关系。在“i2i”场景中，得到充分的利用；</li>
  <li>2.0的版本解决了部分在线预估的问题,除了离线用户无关特征外，加入了用户画像特征，在线的用户意图分析和实时场景预测</li>
</ul>

<!--more-->

<h2 id="section-1">算法模型</h2>

<p>算法上采用LR直接预测用户对候选商品的点击可能性(或者rating)</p>

<h3 id="section-2">特征列表</h3>

<h4 id="section-3">相似特征</h4>

<p>相似推荐中涉及到两个相似的实体：A，B。因此计算考虑点击特征的时候会使用商品的相似特征, 这些特征从单一维度上都可以作为
推荐排序来使用，把这些特征合并在一起同时也起到了模型融合的作用。
同时，在特征中加入了rank特征，即用当前相似性排序时的排序位置。这样可以保证在加入额外特征的时候AUC指标不下降</p>

<ol>
  <li>jacard同店看了看相似度和rank:, rank最大为20,排在20以外的丢弃</li>
  <li>jacard同店买了买相似度和rank:</li>
  <li>cos同店同类看了看和rank:</li>
  <li>cos同店同类买了买和rank:</li>
  <li>同店同类看了买:v1,v2中使用</li>
  <li>同店同类买了看:未使用</li>
  <li>主商品和推荐商品是否为同类目商品</li>
</ol>

<p>说明：数值类特征采用截断分位数后的归一化，(x-min)/(max-min); log后还未用转换为类目相对销量的方式</p>

<h4 id="section-4">商品特征</h4>

<ol>
  <li>人气分： 属于销量预测模型，同时也是搜索的一个重要排序因子</li>
  <li>listctr：统计在list页上的点击率</li>
  <li>cvr：统计的商品pv转化率</li>
  <li>ixx: 行业id</li>
  <li>lxx：叶子类目</li>
  <li>sxx: 店铺id</li>
  <li>归一化推荐商品价格</li>
  <li>归一化推荐商品和主商品价格差</li>
  <li>log(1+周销量) //其中的一种power law的非线性变化方式</li>
  <li>log(1+周成交额)</li>
  <li>log(1+月销量)</li>
  <li>log(1+月成交额)</li>
</ol>

<h4 id="section-5">用户特征</h4>

<p>用户特征在这一期里还没有应用，后续其实可以加入更多的的用户画像、偏好、和意图的特征</p>

<h4 id="section-6">场景特征</h4>

<p>目前没有场景相关的特征，以后对页面的场景，比如在会场页，wap页、售后页，来源页等做适当特征分析
时间、状态（wap和pc）、天气、地点</p>

<h3 id="section-7">特征权重</h3>

<p><img /></p>

<h2 id="section-8">改进点</h2>

<p>有一些改进的方向：</p>

<ol>
  <li>新特征的引入：在常用的i2i场景中，引入人的因素，可以使得推荐的结果效果千人千面</li>
  <li>特征的变换：目前的模型特征线性的部分居多，如何能把特征从线性特征变成非线性的特征，比如对数化，离散化等等。类似svm的特征非线性变换方式</li>
  <li>新模型的探索：LR模型有其天然的局限性，对MOE(mixture of expert)的方法：比如MLR,Tree LR,DT,都可以尝试</li>
  <li>外围分析的方法的建设：
    <ol>
      <li>比如特征权重的分析</li>
      <li>特征重要度的分析</li>
      <li>交叉模型的回归分析</li>
      <li>可视化体验等等</li>
    </ol>
  </li>
  <li>L2R方法的探索：不需要准确预估值，直接预估偏好关系。(L2R方法比直接CTR的方法的优势不是特别明显，在什么业务场景适用L2R还需要进一步探索)</li>
</ol>

<h3 id="section-9">模型改进</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实时推荐]]></title>
    <link href="http://wxwidget.github.io/blog/2013/11/18/realtime-recommender/"/>
    <updated>2013-11-18T16:25:00+08:00</updated>
    <id>http://wxwidget.github.io/blog/2013/11/18/realtime-recommender</id>
    <content type="html"><![CDATA[<h2 id="section">为什么要实时</h2>
<ol>
  <li>每天新发布</li>
  <li>每天修改的商品</li>
  <li>各种换季、打折、促销、新款、活动</li>
  <li>突发事件</li>
  <li>新增加用户</li>
  <li>用户兴趣漂移</li>
</ol>

<p>长尾商品更多的曝光机会
流量动态利用</p>

<p>TIP: 提供一些数据支持，iPV/IPV</p>

<!--more-->

<h3 id="section-1">用户需求</h3>

<p>用户逛的调研:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">需求的强度</th>
      <th style="text-align: left">占比</th>
      <th style="text-align: left">解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">没有购物需求</td>
      <td style="text-align: left">2.2%</td>
      <td style="text-align: left">没事就逛逛</td>
    </tr>
    <tr>
      <td style="text-align: left">想购物还不知道买什么</td>
      <td style="text-align: left">27.2%</td>
      <td style="text-align: left">看看有没有什么划算的</td>
    </tr>
    <tr>
      <td style="text-align: left">想买某类东西，还不明确</td>
      <td style="text-align: left">53.9%</td>
      <td style="text-align: left">好像缺什么东西就逛逛</td>
    </tr>
    <tr>
      <td style="text-align: left">有明确想买的商品</td>
      <td style="text-align: left">16.0%</td>
      <td style="text-align: left">确定想买东西,先搜索</td>
    </tr>
  </tbody>
</table>

<h2 id="section-2">多快才是实时</h2>

<h2 id="section-3">实时推荐的作用</h2>

<h2 id="section-4">系统架构</h2>

<h2 id="section-5">算法实现</h2>

<h3 id="section-6">分类</h3>

<h3 id="section-7">聚类</h3>

<h3 id="section-8">频繁项集</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[冷启动问题求解]]></title>
    <link href="http://wxwidget.github.io/blog/2013/10/14/cold_start_solution/"/>
    <updated>2013-10-14T10:49:00+08:00</updated>
    <id>http://wxwidget.github.io/blog/2013/10/14/cold_start_solution</id>
    <content type="html"><![CDATA[<h2 id="section">冷启动问题的解决</h2>

<p>冷启动问题的分类：</p>

<ol>
  <li>用户冷启动（新用户来了）；</li>
  <li>物品冷启动（新物品来了）；</li>
  <li>系统冷启动（整个推荐系统都是新的，也可以认为，它和“用户冷启动”的区别是，所有用户对系统冷启动来讲都是新用户，都面临冷启动问题）</li>
</ol>

<p>冷启动是稀疏数据问题一种特殊形态。用户跟系统的交互非常少，导致可以利用的数据比较小,也很难为用户建立Profile和兴趣,因此会导致一般的推荐算法失效。</p>

<p>冷启动问题的解决方案：说白了，就是尽可能利用信息给用户一个可以接受的物品列表，最常见的就是热门排行。</p>

<p>有的是根据冷启动问题分类来的，有的是从解决方案（能利用用户什么类型信息）来的。</p>

<h3 id="section-1">启发式方法</h3>

<pre><code>Linear combination of regression and CF models
Filterbot Add user features as psuedo users and do collaborative filtering
Hybrid approaches Use content based to fill up entries, then use CF
</code></pre>

<p>http://grouplens.org/papers/pdf/filterbot-CSCW98.pdf</p>

<h3 id="matrix-factorization">Matrix Factorization</h3>
<p>Good performance on Netflix (Koren, 2009)</p>

<h3 id="model-based-approaches">Model-based approaches</h3>

<ul>
  <li>Bilinear random-effects model (probabilistic matrix factorization)</li>
  <li>Good on Netflix data [Ruslan et al ICML, 2009]</li>
  <li>Add feature-based regression to matrix factorization 
(Agarwal and Chen, 2009)</li>
  <li>Add topic discovery (from textual items) to matrix factorization 
(Agarwal and Chen, 2009; Chun and Blei, 2011)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下一代推荐系统]]></title>
    <link href="http://wxwidget.github.io/blog/2013/08/08/NextGenerationRecSys/"/>
    <updated>2013-08-08T10:47:00+08:00</updated>
    <id>http://wxwidget.github.io/blog/2013/08/08/NextGenerationRecSys</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>讨论祖先和子孙的问题一向是比较困难的事情，什么是上一代，他们有什么特点？下一代推荐系统到底是什么？前后代有什么不一样，是什么关键特征定义了下一代？
本文的重点是，讨论一些论文观点，旨在回答以上的一些疑问
从Gediminas Adomavicius和Alexander Tuzhilin的Towards the Next Generation of Recommender Systems:
A Survey of the State-of-the-Art and Possible Extensions来看(这篇文章引用率非常高)，我的理解是：</p>

<p>第一代推荐系统主分三类:</p>

<ol>
  <li>content-based,基于内容的推荐</li>
  <li>collaborative,基于协同过滤的推荐</li>
  <li>hybrid recommendation, 混合型推荐</li>
</ol>

<p>第二代推荐系统的主要特点是：</p>

<ol>
  <li>user和item的理解</li>
  <li>结合上下文信息</li>
  <li>支持多维度的评价指标</li>
  <li>提供更加有弹性和更少打扰的结果</li>
</ol>

<h2 id="section-1">其人</h2>
<p><a href="http://ids.csom.umn.edu/faculty/gedas/">Gediminas Adomavicius</a>在推荐系统方面有很多研究, 有兴趣可以看看<a href="http://ids.csom.umn.edu/faculty/gedas/NSFCareer/">CAREER: Next Generation Personalization Technologies</a>,研究主题包括：</p>

<ol>
  <li>多准则推荐系统</li>
  <li>推荐查询语言</li>
  <li>推荐的多样性</li>
  <li>时效数据的聚类</li>
  <li>上下文感知推荐</li>
  <li>用户偏好对推荐的影响</li>
  <li>推荐算法的稳定性</li>
  <li>数据特性对推荐的影响</li>
</ol>

<h2 id="section-2">相关讨论</h2>

<h3 id="section-3">第一代推荐系统</h3>

<p>早期的推荐系统主要是“评分预测”和“TOPN”预测，不论是哪一种推荐方式，其核心的目标是找到最适合用户c的项集合s，从集合里挑选集合是一个非常复杂的问题优化方案，通常采用的方案是用贪婪的方式，而我们只需要定义一个的效用函数,选取TOPN。</p>

<h4 id="section-4">基于内容的推荐</h4>
<p>定义效用函数为：用户c和项s的内容上的”相似性”，比如商品推荐中，为了一个用户推荐一款合适的商品，会计算商品和用户历史上看过或者买过的某些特征上的相似性（比如：品牌的偏好，类目的偏好，商品的属性，商品标签等等）。很多推荐都会在有文本的实体上进行推荐，改进的主要思路是：</p>

<ol>
  <li>扩展实体的文本标记。比如：标签，语义树</li>
  <li>用户的文本Profile。比如：taste，preferences,needs。</li>
</ol>

<p>因此，基于内容的推荐算法的关键问题是建立，item的content profile和user的content profile。
对于有问题内容的推荐实体，一般的方法是利用关键词抽取技术，抽取item中最重要的或者最有信息量的一些text。
第一个任务是选择什么的文本，构建的text从来源上可以分成几个，如果来之item本身的内容，通常称为keywords；
如果来自用户的标记，通常称为tags；如果来之外部的query，通常称为intents。
第二个任务是如何在候选词里做weighting和selection。selection的方式一般是用贪心方法，选出topn weighting的词。</p>

<p>构建user的content profile是比较困难的。因为user本生是没有标记的，通常是通过user从前看过的item和当前看过的item做
标记。从时间的维度上，user的content profile可以分成历史和实时部分，历史部分通常是通过挖掘获取，而实时部分通常是
通过巧妙的”average”或者model-based的方法发现用户content profile, 比较出名的content-based推荐系统是<a href="https://www.ischool.utexas.edu/~i385q-dt/readings/Balabanovic_Shoham-1997-Fab.pdf" title="Content-based, collaborative recommendation">Fab</a>,
“adaptive filtering”是一种通过user的浏览记录不断提升精度的content profile构建方式</p>

<h4 id="section-5">协同过滤推荐</h4>
<p>是大家最为熟悉的推荐算法。算法只涉及到user-item的交互矩阵，推荐方式是Heuristic-based(memory-based)方法（item-based和user-based）和
model-based的方法，后面发展的一批改进协同过滤算法的策略，比如：</p>

<ol>
  <li>Default Voting;</li>
  <li>Inverse User Frequency;</li>
  <li>Case Amplification;</li>
  <li>Weighted-majority Prediction
当然其他的协同过滤算法也非常多，下次讨论协同过滤算法的时候在仔细探讨</li>
</ol>

<h4 id="section-6">混合方法，主要是混合基于内容和协同过滤的方法。变种非常多，这里暂不讨论</h4>

<h3 id="section-7">第二代推荐系统</h3>

<ol>
  <li>model-based的一些变化。谈到第二代，论文提供了一些扩展，比如：model-based方法，通常是基于统计和机器学习的方法，
后面有演化出一些基于数学近似的方法，我理解的数学近似方法其实很简单，
就像我们在高中学习的展开式，或者泰勒公式等等，用无穷多的弱项组合成一个误差最小的结果。</li>
  <li>多维度的推荐。其实目前多数的推荐是单维度的，就是对user进行item的推荐，但是有些应用场景，比如：对住在北京的男性用户进行品牌推荐，
或者在妇女节给女性用户推荐优惠商品。这些场景下需要推荐从对个维度上考虑问题，所以在多维的推荐系统中需要一个受众定向的功能。</li>
  <li>多准则的推荐。一般情况下，我们即需要推荐的准确，多样性，惊喜度，时效性，覆盖率等等指标；有时候，我们需要保证推荐的推荐的品质，
比如高端的品牌推荐，不能给用户推荐一些低质量的品牌商。</li>
  <li>不打扰。很多系统为了搜集用户的兴趣，有时候会强迫用户给商品打分，这样会干扰用户的行为。
怎么在用打扰用户的情况下，搜集潜在的用户反馈；对新用户怎么增量的用户信息量最大item，也是快速构建用户profile的一种方式。</li>
</ol>

<p>当然还有很多推荐系统应该解决的问题和扩展，
但是，就这样还不能是二代推荐系统的特征, 推荐系统的发展永远是围绕着“用户体验”来做的。</p>

<h3 id="section-8">参考文献</h3>
]]></content>
  </entry>
  
</feed>
